}
} else {
cat("Modify threshold parameter to either \'auto\' or an integer. This run will fail.", '\n')
}
}
#B) Estimate properties-------------------------------------------------------------------------------
genes <- 1:length(gene_trees)
root_tip_var <- saturation <- missing <- av_patristic <- length <- tree_length <- occupancy <- variable_sites <- RCFV <-
rate <- treeness <- average_BS_support <- robinson_sim <- integer(length(gene_trees))
for(i in 1:length(gene_trees)) {
tree <- gene_trees[[i]]
#remove genes with less than 'threshold' ingroup taxa
if(length(which(tree$tip.label %in% IG)) < threshold) next
#if OGs are defined and present in this tree, root with them
if(length(IG) != length(species_tree$tip.label)) {
if(any(OG %in% tree$tip.label)) {
MRCA <- getMRCA(tree, which(tree$tip.label %in% IG))
tree_rooted <- root(tree, node = MRCA)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[MRCA, which(tree_rooted$tip.label %in% IG)])
#after this remove the OGs from the gene tree
tree <- drop.tip(tree, which(tree$tip.label %in% OG))
} else {
tree_rooted <- midpoint.root(tree)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[(length(tree_rooted$tip.label)+1),(1:length(tree_rooted$tip.label))])
}
} else {  #otherwise do midpoint rooting
tree_rooted <- midpoint.root(tree)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[(length(tree_rooted$tip.label)+1),(1:length(tree_rooted$tip.label))])
}
average_BS_support[i] <- mean(as.numeric(tree$node.label), na.rm = T)
#remove taxa from species tree to match gene tree sampling
if(length(which(species_tree$tip.label %not in% tree$tip.label)) > 0) {
this_species_tree <- drop.tip(species_tree, which(species_tree$tip.label %not in% tree$tip.label))
} else {
this_species_tree <- species_tree
}
if(topological_similarity) {
robinson_sim[i] <- 1 - suppressMessages(RF.dist(this_species_tree, tree, normalize = TRUE, check.labels = TRUE))
}
patristic_dist <- as.matrix(distTips(tree, tips = 'all', method = 'patristic', useC = T))
#get gene sequence
gene <- as.character(data[,partitions$Start[i]:partitions$End[i]])
#remove OGs
if(length(IG) != length(species_tree$tip.label)) {
gene <- gene[-which(rownames(gene) %in% OG),]
}
ntax <- dim(gene)[1]
#remove taxa not in tree (e.g., those with no data for this loci)
if(any(rownames(gene) %not in% tree$tip.label)) {
gene <- gene[-which(rownames(gene) %not in% tree$tip.label),]
}
#remove entirely empty positions (might originate from pruning OGs for
#example)
all_missing <- which(apply(gene, 2, function(x) all(x %in% c('-','?','X'))))
if(length(all_missing) > 0) {
gene <- gene[,-all_missing]
}
variable_sites[i] <- 1 - (length(which(apply(gene, 2, inv)))/dim(gene)[2])
missing[i] <- length(which(gene %in% c('-','?','X')))/(dim(gene)[1]*dim(gene)[2])
length[i] <- dim(gene)[2]
occupancy[i] <- dim(gene)[1]/ntax
p_dist <- as.matrix(dist.hamming(as.phyDat(gene, type = type), ratio = TRUE, exclude = "pairwise"))
p_dist <- p_dist[order(colnames(p_dist)),order(colnames(p_dist))]
patristic_dist <- patristic_dist[order(colnames(patristic_dist)),order(colnames(patristic_dist))]
p_dist <- p_dist[lower.tri(p_dist)]
patristic_dist <- patristic_dist[lower.tri(patristic_dist)]
av_patristic[i] <- mean(patristic_dist)
saturation[i] <- 1 - lm(p_dist ~ patristic_dist)$coefficients[[2]]
if(saturation[i] > 1) saturation[i] <- 1
if(saturation[i] < 0) saturation[i] <- 0
#if sequence is made of AA, calculate comp. heterogeneity
if(type == 'AA') {
mean_freqs <- table(c(gene))
states <- sort(unique(c(gene)))
if('-' %in% states) {
mean_freqs <- mean_freqs[-which(states == '-')]
states <- states[-which(states == '-')]
}
if('?' %in% states) {
mean_freqs <- mean_freqs[-which(states == '?')]
states <- states[-which(states == '?')]
}
if('X' %in% states) {
mean_freqs <- mean_freqs[-which(states == 'X')]
states <- states[-which(states == 'X')]
}
mean_freqs <- mean_freqs/sum(mean_freqs)
freqs <- lapply(split(gene, seq(nrow(gene))), table)
freqs <- lapply(freqs, remove_empty)
for(j in 1:length(freqs)) {
if(!all(states %in% names(freqs[[j]]))) {
miss <- states[which(states %not in% names(freqs[[j]]))]
add <- rep(0, length(miss))
names(add) <- miss
add <- as.table(add)
freqs[[j]] <- as.table(c(freqs[[j]], add))
freqs[[j]] <- freqs[[j]][order(factor(names(freqs[[j]])))]
}
}
freqs <- lapply(freqs, function(x) x/sum(x))
freqs <- lapply(freqs, function(x) abs(x-mean_freqs))
freqs <- lapply(freqs, function(x) x/dim(gene)[1])
freqs <- lapply(freqs, function(x) sum(unlist(x)))
RCFV[i] <- sum(unlist(freqs))
}
tree_length[i] <- sum(tree$edge.length)
rate[i] <- sum(tree$edge.length)/length(tree$tip.label)
treeness[i] = 1 - (sum(tree$edge.length[which(tree$edge[,2] %in% c(1:length(tree$tip.label)))])/sum(tree$edge.length))
}
tree2
i
tree
#remove genes with less than 'threshold' ingroup taxa
if(length(which(tree$tip.label %in% IG)) < threshold) next
i
length(IG) != length(species_tree$tip.label)
plot(species_tree)
pdf("speciestree.pdf", height = 15, width = 5)
plot(species_tree)
dev.off()
pdf("speciestree.pdf", height = 15, width = 5)
dev.off()
pdf("speciestree.pdf", height = 20, width = 10)
plot(species_tree)
dev.off()
rm(list = ls())
setwd('~/Desktop/genesortR_bom/')
#INPUT: fill this with file names
alignment <- 'concat.fasta'
partition <- 'partitions.txt'
species_tree <- 'svd_newick.tre'
gene_trees <- 'all_gt.tre'
#INPUT: is the alignment 'DNA' or 'AA'
type <- 'DNA'
#INPUT: provide the names of two terminals that bracket the ingroup, i.e., one
#descendant of each of the two main clades of the ingroup. Leave blank and
#properties will be claculated across the enitre tree without removing outliers
ingroup <- c('Alstroemeria apertiflora Hatschbach17552', 'Bomarea edulis Veracruz Tribble65')
#INPUT: do not even consider genes with less than 'threshold' ingroup taxa.
#If threshold == 'auto' then it is automatically set to more than 10% of the
#ingroup terminals (if the dataset is small, a larger value is probably
#desirable)
threshold <- 'auto'
#INPUT: activate/deactivate outlier gene removal (recommended)
remove_outliers <- T
outlier_fraction <- 0.01 #i.e. 1%
##INPUT: Desired number of genes to retain
#if n_genes == 'all' then the dataset is sorted but not subsampled.
n_genes <- 'all'
##INPUT: Whether to incorporate Robinson-Foulds similarity in the PCA. This
##option is available in case the relationships among the studied taxa are
##highly uncertain, and there is concern that specifying a given topology might
##bias results. Alternatively (and preferentially) these uncertainties can also
##be accommodated by using a partially resolved species tree as input, for which
##uncertain relationships have been collapsed. In that case, RF similarities
##will not be affected by the specific resolution of uncertain nodes favored by
##different genes. Note that even if topological_similarity is set to FALSE, a
##species tree needs to be provided to delineate the species in the ingroup
topological_similarity <- T
#Install and load packages-------------------------------------------------------------------------
packages <- c('ape','phytools','phangorn','tibble','dplyr','tidyr','adephylo','ggplot2','cowplot')
new_packages <- packages[!packages %in% installed.packages()[,'Package']]
if(length(new_packages)) { install.packages(new_packages) }
library(phangorn)
library(ape)
library(tibble)
library(dplyr)
library(tidyr)
library(phytools)
library(adephylo)
library(ggplot2)
library(cowplot)
#Some necessary functions-----------------------------------------------------------------------------------
`%not in%` <- function(x, table) is.na(match(x, table, nomatch = NA_integer_))
#function to count invariant sites
inv <- function(x) {
pattern <- unique(x)
if(any(pattern %in% c('?'))) pattern <- pattern[-which(pattern == '?')]
if(any(pattern %in% c('-'))) pattern <- pattern[-which(pattern == '-')]
if(any(pattern %in% c('X'))) pattern <- pattern[-which(pattern == 'X')]
if(length(pattern) == 1) {
invariant <- T
} else {
invariant <- F
}
return(invariant)
}
#function to remove missing data from the estimation of RCFV
remove_empty <- function(x) {
if('-' %in% names(unlist(x))) {
missing <- which(names(unlist(x)) == '-')
x <- x[-missing]
}
if('?' %in% names(unlist(x))) {
missing <- which(names(unlist(x)) == '?')
x <- x[-missing]
}
if('X' %in% names(unlist(x))) {
missing <- which(names(unlist(x)) == 'X')
x <- x[-missing]
}
return(x)
}
#A) Prepare data-------------------------------------------------------------------------------------------------------
data <- read.phyDat(alignment, format = 'fasta', type = type)
if(type == 'AA') {
data <- as.AAbin(data)
} else {
data <- as.DNAbin(data)
}
partitions <- read.table(partition, sep = ' ')
names <- as.character(unlist(enframe(partitions[,(which(partitions[1,] == '=') - 1)], name = NULL), use.names = F))
partitions <- enframe(partitions[,ncol(partitions)], name = NULL)
partitions <- partitions %>% separate(value, into = c('Start', 'End'), sep = '-') %>%
mutate_if(is.character, as.numeric)
gene_trees <- read.tree(gene_trees)
species_tree <- read.tree(species_tree)
#get names of ingroup and outgroup taxa
if(all(nchar(ingroup) != 0)) {
node <- getMRCA(species_tree, ingroup)
IG <- Descendants(species_tree, node, type = 'tips')
IG <- species_tree$tip.label[unlist(IG)]
OG <- species_tree$tip.label[species_tree$tip.label %not in% IG]
} else {
IG <- species_tree$tip.label
}
IG
all(nchar(ingroup) != 0)
node
getMRCA(species_tree, ingroup)
ingroup
#INPUT: provide the names of two terminals that bracket the ingroup, i.e., one
#descendant of each of the two main clades of the ingroup. Leave blank and
#properties will be claculated across the enitre tree without removing outliers
ingroup <- c('Alstroemeria_apertiflora_Hatschbach17552', 'Bomarea_edulis_Veracruz_Tribble65')
#INPUT: do not even consider genes with less than 'threshold' ingroup taxa.
#If threshold == 'auto' then it is automatically set to more than 10% of the
#ingroup terminals (if the dataset is small, a larger value is probably
#desirable)
threshold <- 'auto'
#INPUT: activate/deactivate outlier gene removal (recommended)
remove_outliers <- T
outlier_fraction <- 0.01 #i.e. 1%
##INPUT: Desired number of genes to retain
#if n_genes == 'all' then the dataset is sorted but not subsampled.
n_genes <- 'all'
##INPUT: Whether to incorporate Robinson-Foulds similarity in the PCA. This
##option is available in case the relationships among the studied taxa are
##highly uncertain, and there is concern that specifying a given topology might
##bias results. Alternatively (and preferentially) these uncertainties can also
##be accommodated by using a partially resolved species tree as input, for which
##uncertain relationships have been collapsed. In that case, RF similarities
##will not be affected by the specific resolution of uncertain nodes favored by
##different genes. Note that even if topological_similarity is set to FALSE, a
##species tree needs to be provided to delineate the species in the ingroup
topological_similarity <- T
#Install and load packages-------------------------------------------------------------------------
packages <- c('ape','phytools','phangorn','tibble','dplyr','tidyr','adephylo','ggplot2','cowplot')
new_packages <- packages[!packages %in% installed.packages()[,'Package']]
if(length(new_packages)) { install.packages(new_packages) }
library(phangorn)
library(ape)
library(tibble)
library(dplyr)
library(tidyr)
library(phytools)
library(adephylo)
library(ggplot2)
library(cowplot)
#Some necessary functions-----------------------------------------------------------------------------------
`%not in%` <- function(x, table) is.na(match(x, table, nomatch = NA_integer_))
#function to count invariant sites
inv <- function(x) {
pattern <- unique(x)
if(any(pattern %in% c('?'))) pattern <- pattern[-which(pattern == '?')]
if(any(pattern %in% c('-'))) pattern <- pattern[-which(pattern == '-')]
if(any(pattern %in% c('X'))) pattern <- pattern[-which(pattern == 'X')]
if(length(pattern) == 1) {
invariant <- T
} else {
invariant <- F
}
return(invariant)
}
#function to remove missing data from the estimation of RCFV
remove_empty <- function(x) {
if('-' %in% names(unlist(x))) {
missing <- which(names(unlist(x)) == '-')
x <- x[-missing]
}
if('?' %in% names(unlist(x))) {
missing <- which(names(unlist(x)) == '?')
x <- x[-missing]
}
if('X' %in% names(unlist(x))) {
missing <- which(names(unlist(x)) == 'X')
x <- x[-missing]
}
return(x)
}
#A) Prepare data-------------------------------------------------------------------------------------------------------
data <- read.phyDat(alignment, format = 'fasta', type = type)
if(type == 'AA') {
data <- as.AAbin(data)
} else {
data <- as.DNAbin(data)
}
partitions <- read.table(partition, sep = ' ')
names <- as.character(unlist(enframe(partitions[,(which(partitions[1,] == '=') - 1)], name = NULL), use.names = F))
partitions <- enframe(partitions[,ncol(partitions)], name = NULL)
partitions <- partitions %>% separate(value, into = c('Start', 'End'), sep = '-') %>%
mutate_if(is.character, as.numeric)
gene_trees <- read.tree(gene_trees)
species_tree <- read.tree(species_tree)
gene_trees
species_tree
#get names of ingroup and outgroup taxa
if(all(nchar(ingroup) != 0)) {
node <- getMRCA(species_tree, ingroup)
IG <- Descendants(species_tree, node, type = 'tips')
IG <- species_tree$tip.label[unlist(IG)]
OG <- species_tree$tip.label[species_tree$tip.label %not in% IG]
} else {
IG <- species_tree$tip.label
}
if(threshold == 'auto') {
threshold <- ceiling(length(IG)/10)
if(all(nchar(ingroup) != 0)) {
cat('Setting threshold to evaluate loci to', threshold, 'taxa (i.e., 10% of ingroup taxa).\n')
} else {
cat('Setting threshold to evaluate loci to', threshold, 'taxa (i.e., 10% of all taxa).\n')
}
} else {
if(is.numeric(threshold)) {
if(threshold == 0) {
cat('Taxon threshold is disabled. All loci will be considered regardless of occupancy level.\n')
} else {
if(threshold < 1) {
threshold <- ceiling(length(IG) * threshold)
cat('Threshold was expecting an integer but was provided a number < 1.\n')
cat('It will be assumed that this should be taken as a fraction of ingroup taxa.\n')
} else {
if(all(nchar(ingroup) != 0)) {
cat('Loci with less than', threshold, 'ingroup will be discarded.\n')
} else {
cat('Loci with less than', threshold, 'taxa will be discarded.\n')
}
}
}
} else {
cat("Modify threshold parameter to either \'auto\' or an integer. This run will fail.", '\n')
}
}
#B) Estimate properties-------------------------------------------------------------------------------
genes <- 1:length(gene_trees)
root_tip_var <- saturation <- missing <- av_patristic <- length <- tree_length <- occupancy <- variable_sites <- RCFV <-
rate <- treeness <- average_BS_support <- robinson_sim <- integer(length(gene_trees))
for(i in 1:length(gene_trees)) {
tree <- gene_trees[[i]]
#remove genes with less than 'threshold' ingroup taxa
if(length(which(tree$tip.label %in% IG)) < threshold) next
#if OGs are defined and present in this tree, root with them
if(length(IG) != length(species_tree$tip.label)) {
if(any(OG %in% tree$tip.label)) {
MRCA <- getMRCA(tree, which(tree$tip.label %in% IG))
tree_rooted <- root(tree, node = MRCA)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[MRCA, which(tree_rooted$tip.label %in% IG)])
#after this remove the OGs from the gene tree
tree <- drop.tip(tree, which(tree$tip.label %in% OG))
} else {
tree_rooted <- midpoint.root(tree)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[(length(tree_rooted$tip.label)+1),(1:length(tree_rooted$tip.label))])
}
} else {  #otherwise do midpoint rooting
tree_rooted <- midpoint.root(tree)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[(length(tree_rooted$tip.label)+1),(1:length(tree_rooted$tip.label))])
}
average_BS_support[i] <- mean(as.numeric(tree$node.label), na.rm = T)
#remove taxa from species tree to match gene tree sampling
if(length(which(species_tree$tip.label %not in% tree$tip.label)) > 0) {
this_species_tree <- drop.tip(species_tree, which(species_tree$tip.label %not in% tree$tip.label))
} else {
this_species_tree <- species_tree
}
if(topological_similarity) {
robinson_sim[i] <- 1 - suppressMessages(RF.dist(this_species_tree, tree, normalize = TRUE, check.labels = TRUE))
}
patristic_dist <- as.matrix(distTips(tree, tips = 'all', method = 'patristic', useC = T))
#get gene sequence
gene <- as.character(data[,partitions$Start[i]:partitions$End[i]])
#remove OGs
if(length(IG) != length(species_tree$tip.label)) {
gene <- gene[-which(rownames(gene) %in% OG),]
}
ntax <- dim(gene)[1]
#remove taxa not in tree (e.g., those with no data for this loci)
if(any(rownames(gene) %not in% tree$tip.label)) {
gene <- gene[-which(rownames(gene) %not in% tree$tip.label),]
}
#remove entirely empty positions (might originate from pruning OGs for
#example)
all_missing <- which(apply(gene, 2, function(x) all(x %in% c('-','?','X'))))
if(length(all_missing) > 0) {
gene <- gene[,-all_missing]
}
variable_sites[i] <- 1 - (length(which(apply(gene, 2, inv)))/dim(gene)[2])
missing[i] <- length(which(gene %in% c('-','?','X')))/(dim(gene)[1]*dim(gene)[2])
length[i] <- dim(gene)[2]
occupancy[i] <- dim(gene)[1]/ntax
p_dist <- as.matrix(dist.hamming(as.phyDat(gene, type = type), ratio = TRUE, exclude = "pairwise"))
p_dist <- p_dist[order(colnames(p_dist)),order(colnames(p_dist))]
patristic_dist <- patristic_dist[order(colnames(patristic_dist)),order(colnames(patristic_dist))]
p_dist <- p_dist[lower.tri(p_dist)]
patristic_dist <- patristic_dist[lower.tri(patristic_dist)]
av_patristic[i] <- mean(patristic_dist)
saturation[i] <- 1 - lm(p_dist ~ patristic_dist)$coefficients[[2]]
if(saturation[i] > 1) saturation[i] <- 1
if(saturation[i] < 0) saturation[i] <- 0
#if sequence is made of AA, calculate comp. heterogeneity
if(type == 'AA') {
mean_freqs <- table(c(gene))
states <- sort(unique(c(gene)))
if('-' %in% states) {
mean_freqs <- mean_freqs[-which(states == '-')]
states <- states[-which(states == '-')]
}
if('?' %in% states) {
mean_freqs <- mean_freqs[-which(states == '?')]
states <- states[-which(states == '?')]
}
if('X' %in% states) {
mean_freqs <- mean_freqs[-which(states == 'X')]
states <- states[-which(states == 'X')]
}
mean_freqs <- mean_freqs/sum(mean_freqs)
freqs <- lapply(split(gene, seq(nrow(gene))), table)
freqs <- lapply(freqs, remove_empty)
for(j in 1:length(freqs)) {
if(!all(states %in% names(freqs[[j]]))) {
miss <- states[which(states %not in% names(freqs[[j]]))]
add <- rep(0, length(miss))
names(add) <- miss
add <- as.table(add)
freqs[[j]] <- as.table(c(freqs[[j]], add))
freqs[[j]] <- freqs[[j]][order(factor(names(freqs[[j]])))]
}
}
freqs <- lapply(freqs, function(x) x/sum(x))
freqs <- lapply(freqs, function(x) abs(x-mean_freqs))
freqs <- lapply(freqs, function(x) x/dim(gene)[1])
freqs <- lapply(freqs, function(x) sum(unlist(x)))
RCFV[i] <- sum(unlist(freqs))
}
tree_length[i] <- sum(tree$edge.length)
rate[i] <- sum(tree$edge.length)/length(tree$tip.label)
treeness[i] = 1 - (sum(tree$edge.length[which(tree$edge[,2] %in% c(1:length(tree$tip.label)))])/sum(tree$edge.length))
}
gene_trees
gene_trees[[1]]
species_tree
i
#B) Estimate properties-------------------------------------------------------------------------------
genes <- 1:length(gene_trees)
root_tip_var <- saturation <- missing <- av_patristic <- length <- tree_length <- occupancy <- variable_sites <- RCFV <-
rate <- treeness <- average_BS_support <- robinson_sim <- integer(length(gene_trees))
rate
integer(length(gene_trees))
length(gene_trees)
tree <- gene_trees[[i]]
#remove genes with less than 'threshold' ingroup taxa
if(length(which(tree$tip.label %in% IG)) < threshold) next
#if OGs are defined and present in this tree, root with them
if(length(IG) != length(species_tree$tip.label)) {
if(any(OG %in% tree$tip.label)) {
MRCA <- getMRCA(tree, which(tree$tip.label %in% IG))
tree_rooted <- root(tree, node = MRCA)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[MRCA, which(tree_rooted$tip.label %in% IG)])
#after this remove the OGs from the gene tree
tree <- drop.tip(tree, which(tree$tip.label %in% OG))
} else {
tree_rooted <- midpoint.root(tree)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[(length(tree_rooted$tip.label)+1),(1:length(tree_rooted$tip.label))])
}
} else {  #otherwise do midpoint rooting
tree_rooted <- midpoint.root(tree)
root_tip_var[i] <- var(dist.nodes(tree_rooted)[(length(tree_rooted$tip.label)+1),(1:length(tree_rooted$tip.label))])
}
average_BS_support[i] <- mean(as.numeric(tree$node.label), na.rm = T)
average_BS_support[i]
#remove taxa from species tree to match gene tree sampling
if(length(which(species_tree$tip.label %not in% tree$tip.label)) > 0) {
this_species_tree <- drop.tip(species_tree, which(species_tree$tip.label %not in% tree$tip.label))
} else {
this_species_tree <- species_tree
}
if(topological_similarity) {
robinson_sim[i] <- 1 - suppressMessages(RF.dist(this_species_tree, tree, normalize = TRUE, check.labels = TRUE))
}
this_species_tree
gene_tree
gene_trees[i]
gene_trees[[i]
]
gene_trees[[i]]$tip.label %not in% this_species_tree$tip.label
gene_trees[[i]]$tip.label[gene_trees[[i]]$tip.label %not in% this_species_tree$tip.label]
this_species_tree$tip.label
species_tree$tip.label
gene_trees[[i]]$tip.label[gene_trees[[i]]$tip.label %not in% species_tree$tip.label]
install.packages("sf")
library(sf)
library(rgdal)
library(adephylo)
